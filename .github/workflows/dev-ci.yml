name: Dev CI

on:
  workflow_dispatch:
  pull_request:

permissions: { }

# Cancel previous workflows if they are the same workflow on same ref (branch/tags)
# with the same event (push/pull_request) even they are in progress.
# This setting will help reduce the number of duplicated workflows.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  java:
    name: Build Java ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4.2.1
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Checkout sources
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Build with Maven (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: ./mvnw --batch-mode -Pjacoco install

      - name: Build with Maven (Windows)
        if: matrix.os == 'windows-latest'
        run: mvnw.cmd --batch-mode install
        shell: cmd

      - name: Build with Maven (MacOS)
        if: matrix.os == 'macos-latest'
        run: ./mvnw --batch-mode install

      - name: Run SonarCloud analysis
        if: matrix.os == 'ubuntu-latest'
        run: >
          ./mvnw --batch-mode -DskipTests sonar:sonar
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.organization=powsybl-ci-github
          -Dsonar.projectKey=com.powsybl:powsybl-metrix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  cpp_centos7:
    name: Build C++ CentOS7
    runs-on: ubuntu-latest
    container: 'centos:centos7'
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
    steps:
      - name: Update mirrors
        run: |
          sed -i s/mirror.centos.org/vault.centos.org/g /etc/yum.repos.d/*.repo
          sed -i s/^#.*baseurl=http/baseurl=http/g /etc/yum.repos.d/*.repo
          sed -i s/^mirrorlist=http/#mirrorlist=http/g /etc/yum.repos.d/*.repo

      - name: Update Dependencies
        run: |
          yum update -y

      - name: Install Dependencies 1
        run: |
          yum install -y epel-release

      - name: Install Dependencies 2
        run: |
          yum install -y git redhat-lsb-core make wget centos-release-scl scl-utils

      - name: Update mirrors again because why not
        run: |
          sed -i s/mirror.centos.org/vault.centos.org/g /etc/yum.repos.d/*.repo
          sed -i s/^#.*baseurl=http/baseurl=http/g /etc/yum.repos.d/*.repo
          sed -i s/^mirrorlist=http/#mirrorlist=http/g /etc/yum.repos.d/*.repo

      - name: Install Dependencies 3
        run: |
          yum install -y devtoolset-9

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: '3.22.x'

      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Download Boost-release
        uses: dsaltares/fetch-gh-release-asset@a40c8b4a0471f9ab81bdf73a010f74cc51476ad4 # v1.1.1
        with:
          repo: 'ARnDOSrte/Boost'
          file: 'boost_1_73_0.zip'
          target: 'boost_1_73_0.zip'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Unzip Boost
        run: unzip boost_1_73_0.zip

      - name: Configure 3rd parties
        run: |
          source /opt/rh/devtoolset-9/enable
          cmake -S $GITHUB_WORKSPACE/metrix-simulator/external -B $GITHUB_WORKSPACE/metrix-simulator/build-centos7/external

      - name: Build 3rd parties
        run: |
          cmake --build $GITHUB_WORKSPACE/metrix-simulator/build-centos7/external --parallel 2

      - name: Configure CMake
        run: |
          source /opt/rh/devtoolset-9/enable
          cmake -S $GITHUB_WORKSPACE/metrix-simulator -Wno-dev -DCMAKE_BUILD_TYPE=Release -DBoost_ROOT=$GITHUB_WORKSPACE/__w/Boost/Boost/boost_1_73_0/installBoost -DBoost_INCLUDE_DIR=$GITHUB_WORKSPACE/__w/Boost/Boost/boost_1_73_0/installBoost -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/metrix-simulator/build-centos7/install -B $GITHUB_WORKSPACE/metrix-simulator/build-centos7

      - name: Build
        run: cmake --build $GITHUB_WORKSPACE/metrix-simulator/build-centos7 --target install --parallel 2

      - name: Tests
        run: cd $GITHUB_WORKSPACE/metrix-simulator/build-centos7 && ctest -j2 --output-on-failure

  cpp_oraclelinux8:
    name: Build C++ Oracle Linux 8
    runs-on: ubuntu-latest
    container: 'oraclelinux:8'
    steps:
      - name: Install Boost
        run: |
          yum update -y
          yum install cmake make gcc gcc-c++ which git
          dnf --enablerepo=ol8_codeready_builder install boost-static

      - name: Checkout sources
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Configure 3rd parties
        run: >
          cmake -S $GITHUB_WORKSPACE/metrix-simulator/external -B $GITHUB_WORKSPACE/metrix-simulator/build-ol8/external

      - name: Build 3rd parties
        run: >
          cmake --build $GITHUB_WORKSPACE/metrix-simulator/build-ol8/external --parallel 2

      - name: Configure CMake
        run: >
          cmake -Wno-dev -S $GITHUB_WORKSPACE/metrix-simulator -B $GITHUB_WORKSPACE/metrix-simulator/build-ol8
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/metrix-simulator/build-ol8/install

      - name: Build
        run: cmake --build $GITHUB_WORKSPACE/metrix-simulator/build-ol8 --target install --parallel 2

      - name: Tests
        run: cd $GITHUB_WORKSPACE/metrix-simulator/build-ol8 && ctest -j8 --output-on-failure

  cpp_ubuntu:
    name: Build C++ Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Install Boost
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libboost-all-dev

      - name: Checkout sources
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Configure 3rd parties
        run: >
          cmake -S $GITHUB_WORKSPACE/metrix-simulator/external -B $GITHUB_WORKSPACE/metrix-simulator/build-linux/external

      - name: Build 3rd parties
        run: >
          cmake --build $GITHUB_WORKSPACE/metrix-simulator/build-linux/external --parallel 2

      - name: Configure CMake
        run: >
          cmake -Wno-dev -S $GITHUB_WORKSPACE/metrix-simulator -B $GITHUB_WORKSPACE/metrix-simulator/build-linux
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/metrix-simulator/build-linux/install

      - name: Build
        run: cmake --build $GITHUB_WORKSPACE/metrix-simulator/build-linux --target install --parallel 2

      - name: Tests
        run: cd $GITHUB_WORKSPACE/metrix-simulator/build-linux && ctest -j8 --output-on-failure

  cpp_ubuntu_qa:
    name: Short QA C++ Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Install Java 17
        uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4.2.1
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install gcovr
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gcovr

      - name: Install Sonar wrapper
        working-directory: ${{ runner.workspace }}
        run: |
          wget https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
          unzip build-wrapper-linux-x86.zip

      - name: Install Sonar scanner
        working-directory: ${{ runner.workspace }}
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}.zip
          unzip sonar-scanner-cli-${SONAR_SCANNER_VERSION}.zip
          ln -s sonar-scanner-${SONAR_SCANNER_VERSION} sonar
          rm sonar-scanner-cli-${SONAR_SCANNER_VERSION}.zip
        env:
          SONAR_SCANNER_VERSION: 3.3.0.1492

      - name: Install Boost
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libboost-all-dev

      - name: Checkout sources
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Configure 3rd parties
        run: >
          cmake -S $GITHUB_WORKSPACE/metrix-simulator/external -B $GITHUB_WORKSPACE/metrix-simulator/build/external

      - name: Build 3rd parties
        run: >
          cmake --build $GITHUB_WORKSPACE/metrix-simulator/build/external --parallel 2

      - name: Configure CMake
        run: >
          cmake -Wno-dev -S $GITHUB_WORKSPACE/metrix-simulator -B $GITHUB_WORKSPACE/metrix-simulator/build
          -DCMAKE_BUILD_TYPE=Debug
          -DCODE_COVERAGE=TRUE
          -DMETRIX_RUN_ALL_TESTS=OFF
          -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/metrix-simulator/build/install

      - name: Build
        run: >
          ${{ runner.workspace }}/build-wrapper-linux-x86/build-wrapper-linux-x86-64
          --out-dir $GITHUB_WORKSPACE/metrix-simulator/build/output
          cmake --build $GITHUB_WORKSPACE/metrix-simulator/build --parallel 2 --target install

      - name: Tests
        run: cd $GITHUB_WORKSPACE/metrix-simulator/build && ctest -j8 --output-on-failure

      - name: Code coverage
        run: cmake --build $GITHUB_WORKSPACE/metrix-simulator/build --target code-coverage

      - name: Sonarcloud
        working-directory: ${{ runner.workspace }}/powsybl-metrix/metrix-simulator
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: >
          ${{ runner.workspace }}/sonar/bin/sonar-scanner
          -Dsonar.host.url=https://sonarcloud.io

  cpp_clang_tidy:
    name: Clang Tidy Report
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' # github.base_ref exists only for PRs
    steps:
      - name: Install Boost
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libboost-all-dev

      - name: Install clang-tidy
        run: |
          sudo apt install -y clang-tidy-15
          sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-15 100

      - name: Checkout sources
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Fetch git base ref
        run: >
          git fetch --no-tags --depth=1 origin ${{ github.base_ref }}
          git show-ref

      - name: Configure 3rd parties
        run: >
          cmake -S $GITHUB_WORKSPACE/metrix-simulator/external -B $GITHUB_WORKSPACE/metrix-simulator/build/external

      - name: Build 3rd parties
        run: >
          cmake --build $GITHUB_WORKSPACE/metrix-simulator/build/external --parallel 2

      - name: Configure CMake
        run: >
          cmake -S $GITHUB_WORKSPACE/metrix-simulator -B $GITHUB_WORKSPACE/metrix-simulator/build
          -DCMAKE_BUILD_TYPE=Debug
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Generate Clang Tidy Report (Modified C++ sources in PR)
        id: clang-pr
        run: |
          REPORT_NAME="clang_tidy_report_pr.txt"
          REPORT_PATH="$PWD/${REPORT_NAME}"
          export METRIX_CPP_SOURCES=$(git diff --name-only --diff-filter=d origin/${{ github.base_ref }} origin/${{ github.head_ref }}  | grep -E ".*(metrix-simulator/src|metrix-simulator/log).*\.(cpp|hpp)$")
          if [ -n "$METRIX_CPP_SOURCES" ]; then
            clang-tidy $METRIX_CPP_SOURCES -p $GITHUB_WORKSPACE/metrix-simulator/build > $REPORT_NAME || true
            echo "report_exists=true" >> "$GITHUB_OUTPUT"
            echo "report_name=$REPORT_NAME" >> "$GITHUB_OUTPUT"
            echo "report_path=$REPORT_PATH" >> "$GITHUB_OUTPUT"
          else
            echo "No C++ source file modification found in this PR, no Clang Tidy report will be generated"
          fi

      - name: Upload Clang Tidy Report (Modified C++ sources in PR)
        if: steps.clang-pr.outputs.report_exists
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # 4.3.3
        with:
          name: ${{ steps.clang-pr.outputs.report_name }}
          path: ${{ steps.clang-pr.outputs.report_path }}
