//
// Copyright (c) 2021, RTE (http://www.rte-france.com)
// See AUTHORS.txt
// All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, you can obtain one at http://mozilla.org/MPL/2.0/.
// SPDX-License-Identifier: MPL-2.0
//

/**
 * \mainpage
 * \tableofcontents
 * \section Summary
 * ... TODO ...
 *
 * \section Algorithm
 * ... TODO ...
 *
 * Put here system and mathematical considerations
 *
 * \section interface Inputs / Outputs
 *
 * \subsection inputs Inputs
 * \subsubsection inputs_description Description
 * __fort.json__:
 * Contains at JSON format the configuration of the grid and the computations options. This file is meant to be
 * generated by an upper layer software.
 *
 * __program options__:
 * All program options are displayed in the helper ("--help" option).
 * Here's the list of all required inputs of the program, in that order:
 * - pathname of the result output log file (metrixOut.txt)
 * - pathname of the variant input file (variantes.csv)
 * - pathname of the result output file (out)
 * - index number of the first variant to process
 * - number of variants to process
 * - pathname of the parades input file (optional, by default "parades.csv" is used)
 *
 * Here a non exhaustive list of options which have influence on outputs:
 * - "-p": activate the standard output for logs
 * - "--log-level": level of the logger, info by default
 * - "--verbose-config": activate supplementary logs for configuration reading (see @a Logger class)
 * - "--verbose-constraints": activate supplementary logs for constraint detection (see @a Logger class)
 * - "--write-constraints": write constraints in a dedicated file
 * - "--print-constraints": Trace in logs the constraints matrix
 * - "--write-sensitivity": write the sensivity matrix in a dedicated file
 * - "--write-report": write the rate matrix report in a dedicated file
 * - "--all-outputs": display all values in results file, not just the reduced outputs
 *
 * \subsubsection input_format Input files format
 * __fort.json__:
 * JSON assumed hierarchy:
 * @code
 *  "files": [
 *     "attributes": [
 *         {
 *             "name": <KEY>
 *             "type": "INTEGER" or "FLOAT" or "DOUBLE" or "STRING" or "BOOLEAN"
 *             "values": [
 *                 <VALUES>
 *             ]
 *         }
 *     ]
 * ]
 * @endcode
 * where KEY is the key of the configuration set by the upper layer and VALUES is the comma-separated list of the values
 * for the key.
 * Other JSON keys are ignored
 *
 * __variantes.csv__:
 *
 * first line:
 * @code
 * NT;<NB>;
 * @endcode
 * where NB is the number of items
 *
 * all other lines:
 * @code
 * <VAR>;<KEY>;<NB_CHANGES>;...
 * @endcode
 *
 * where:
 * - VAR is the variant index (-1 for base variant)
 * - KEY is the key of the configuration to change (same name as for fort.json file)
 * - NB_CHANGES is the number of changes to perform for this key for this variant
 *
 * followed by NB_CHANGES data (format of the data depends on the key)
 *
 * __parades.csv__:
 *
 * first line:
 * @code
 * NB:<NB>;
 * @endcode
 * where NB is the number of parades defined in the file
 *
 * all other lines:
 * @code
 * <INCIDENT_NAME>(<CONSTRAINTS>);<NB_COUPLING>;...
 * @endcode
 * where:
 * - INCIDENT_NAME is the name of the incident for the parade
 * - CONSTRAINTS (optional) is the '|' sperated list of constrainted incidents for the parade
 * - NB_COUPLING is the number of coupling to perform in the parade
 *
 * followed by NB_COUPLING coupling which comply with the following format:
 * @code
 * <SGN><NAME>
 * @endcode
 * where NAME is the name of a quadripol to use and SGN is '+' to close the quadripol, nothing to open it
 *
 * \subsection outputs Outputs
 * \subsubsection outputs_description Description
 * __results files__:
 * ... TODO ...
 *
 * __log files__:
 * - result log file (metrixOut.txt): raw information are displayed, without formatting. This file is used as a user
 * friendly log file. The same information are displayed the dev log files
 * - dev log files (metrixXXX.log): rotating files with a max size of 5 MB. If the log file reaches this size, another
 * file will be created and used. The logs in this file are using the format described in the @a Logger class
 * documentation
 *
 * __standard output__: if activated by the program options, information log in log dev is printed out on the standard
 * output
 *
 * __constraint file__: if "--write-constraints" option is activate, the constraints files with the pattern
 * "contraintes_<NUM>_<ITER>.txt" are written, where NUM is the current variant number and ITER the current micro
 * iteration index. ... TODO ... purpose ?
 *
 * __sensitivity file__: if "--write-sensitivity" option is activated, the sensivity file "matrice_sensibilites.csv" is
 * written. ... TODO ... purpose ?
 *
 * __report file__: if "--write-report" option is activated, the report file "matrice_taux_report.csv" is written.
 * ... TODO ...
 *
 * \subsubsection out_format Output files format
 *
 * __results files__:
 * ... TODO ...
 *
 * __log files__: see @a Logger class
 *
 * __standard output__: same format as dev log, see @a Logger class
 *
 * __constraint file__:
 *
 * each line corresponds to a constraint, complying with the following pattern:
 * @code
 * <TYPE>> : <NUM>; Transit = <TRANSIT>; MaxT = <MAX_TRANSIT>; MinT =<MIN_TRANSIT>;  ElemAS = <MON_NAME> (<MON_NUM>);
 * nomQicdt = <INCIDENT_NAME> (<INCIDENT_NUM>)
 * @endcode
 * where:
 * - TYPE is the type of the constraint (Cur if associated to a parade)
 * - NUM is the constraint num if relevant, "N/A" if not
 * - TRANSIT is the transit constraint if relevant, 99999 if not
 * - MAX_TRANSIT is the allowed upper bound for transit if relevant, 99999 if not
 * - MAX_TRANSIT is the allowed lower bound for transit if relevant, 99999 if not
 * - MON_NAME is the name of the monitored element on which the constraint applies
 * - MON_NUM is the number of the monitored element on which the constraint applies
 * - INCIDENT_NAME is the name of the incident generating the constraint
 * - INCIDENT_NUM is the number of the incident generating the constraint
 *
 * __sensitivity file__:
 * ... TODO ...
 *
 * __report file__:
 * ... TODO ...
 *
 * \section archi Software architecture
 *
 * \subsection components Components
 *
 * The code is composed of the following code components:
 *
 * \image html component.png "Code components"
 *
 * These components are compiled as separated static libraries then linked to the ain program:
 * - metrix: main component containing the main of the program, configuration management and computation management
 * - log: log library to manage the logging system (see @a Logger class)
 * - PNE: Sirius solver to optimization problem
 * - LU: Linear solver for matrix inversion
 *
 * \subsection sequence Sequence
 *
 * The code behaves as follow in OPF mode:
 *
 * \image html activity_OPF.png "Activity diagram in OPF mode"
 *
 * In "Load flow" mode, constraints are not detected and result from load flow is directly printed out.
 *
 * In "OPF without redispatching" mode, the activity diagram is similar but the criteria for the optimization problem
 * are different.
 *
 */